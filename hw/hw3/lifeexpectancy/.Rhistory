## change from factors to numeric
music.data$wait.times2 <- as.numeric(wait.times2)
## Create ANOVA model
## y is quantitative variable (wait-times) x is categorical group (music)
model1 <- aov(wait.times2~music, data=music.data)
summary(model1)
#Benjamini test
p.values <- c(.06, .01, .002)
p.adjust(p.values, method = "BH")
wait.times2 <- c(5,1,11,2,8,0,1,4,6,3,13,9,8,15,7)
music <- rep(c("Ad", "Muzak", "Classical"), each=5)
music.data <- as.data.frame(cbind(wait.times, music))
## change from factors to numeric
music.data$wait.times2 <- as.numeric(wait.times2)
## Create ANOVA model
## y is quantitative variable (wait-times) x is categorical group (music)
model1 <- aov(wait.times2~music, data=music.data)
summary(model1)
?as.numberic
?as.numeric
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
skittles <- data.frame(trt = c("Purple", "Green", "Red", "Yellow", "Orange"),
outcome = c(18, 20, 19, 20, 25))
skittles
ggplot(skittles, aes(yum, count)) +
geom_col()
skittles <- data.frame(yum = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
ggplot(skittles, aes(yum, count)) +
geom_col()
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
ggplot(skittles, aes(skittle.color, count)) + geom_col()
# Barplot
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity")
skittle.bar
skittle.pie <- skittle.bar + coord_polar("y", start=0)
skittle.pie
skittle.pie + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
library("ggplot2")
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity")
skittle.pie <- skittle.bar + coord_polar("y", start=0)
skittle.pie + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity")
#Pie Chart
skittle.pie <- skittle.bar + coord_polar("y", start=0) + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittle.pie <- skittle.bar + coord_polar("y", start=0) + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittle.pie
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity") + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
#Bar Plot
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity") +
scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
new_name<- c("Orange","Green","Blue","Yellow","Brown","Red")
new_prop_m <- prop_m %>%
as.data.frame()
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
new_name<- c("Orange","Green","Blue","Yellow","Brown","Red")
new_prop_m <- prop_m %>%
as.data.frame()
prop_m <- c(20,22,26,26,16,28)
pv <- c(0.5683,0.9092,0.493,0.493,1,0.003238)
orange <- binom.test(20,138,.1667) #not equal to p
green <- binom.test(22,138,.1667) #not equal to p
blue <- binom.test(26,138,.1667) #not equal to p
yellow <- binom.test(26,138,.1667) #not equal to p
brown <- binom.test(16,138,.1167) #not equal to p
red <- binom.test(28,138,.1167) #not equal to p
new_name<- c("Orange","Green","Blue","Yellow","Brown","Red")
new_prop_m <- prop_m %>%
as.data.frame()
new_name <- new_name %>%
as.data.frame()
pv <- pv %>%
as.data.frame()
data <- cbind(new_name,pv)
ggplot(data = data, aes(x = new_name, y =.)) +
geom_bar(stat = "identity") +
xlab("M&M colors") +
ylab("Number of M&Ms")
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
#Bar Plot
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color)) +
geom_bar(width = 1, stat = "identity") + xlab("Color") + ylab("Count")
skittle.bar
#Pie Chart
skittle.pie <- skittle.bar + coord_polar("y", start=0)
skittle.pie + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittle.pie
library(shiny)
library(babynames)
install.packages(shiny)
install.packages("shiny")
install.packages("babynames")
library(shiny)
library(babynames)
View(babynames)
library(shiny)
library(babynames)
runApp('Developments/math216-datascience/lectures/10.25/10.25')
?sliderInput
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
?plotOutput
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
?checkboxGroupInput
runApp('Developments/math216-datascience/lectures/10.25/checkbox')
?textInput
?colourInput
??colourInput
?selectInput
shiny::runApp('Developments/math216-datascience/lectures/10.27/10.27')
library(shiny)
sliderInput(inputId = "slider", label = "Choose a number",
value = 5000, min = 1, max = 10000),
textInput(inputId = "title", label = "Enter a title"),
plotOutput("hist")
plotOutput("hist")
library(shiny)
ui <- fluidPage{
sliderInput(inputId = "slider", label = "Choose a number",
value = 5000, min = 1, max = 10000)
textInput(inputId = "title", label = "Enter a title")
plotOutput("hist")
}
server <- function(input, output) {
output$hist <- renderPlot({
x <- data.frame(numbers = rnorm(input$slider))
ggplot(x, aes(numbers)) + geom_histogram() + fftitle(input$title)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage{
sliderInput(inputId = "slider", label = "Choose a number",
value = 5000, min = 1, max = 10000)
textInput(inputId = "title", label = "Enter a title")
plotOutput("hist")
}
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/10.27')
?isolate
install.packages("babynames")
runApp('Developments/math216-datascience/lectures/10.27/babyname')
install.packages("babyname")
install.packages("babynames")
library(shiny)
library(babynames)
library(ggplot2)
library(tidyverse)
?babynames
babynames %>%
group_by(year)
babynames %>%
select(year)
babynames %>%
filter(year)
testYear <- 1977
babynames %>%
filter(year == testYear)
testYear <- 1977
babynames %>%
filter(year == testYear)
babynames %>%
filter(year == testYear)
arrange(prop)
library(shiny)
library(babynames)
library(ggplot2)
library(tidyverse)
testYear <- 1977
babynames %>%
filter(year == testYear)
arrange(year, prop)
#  select(sex, name, prop)
prop
babynames$prop
babynames %>%
filter(year == testYear)
arrange(year, prop)
babynames %>%
filter(year == testYear)
arrange(year, prop)
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/babyname')
install.packages("okcupiddata")
library(okcupiddata)
data(profiles)
view(profiles)
View(profiles)
install.packages("okcupiddata")
library(okcupiddata)
data(profiles)
View(profiles)
adventurous <-
profiles %>%
library(rvest)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(okcupiddata)
onlywhites <- profiles %>% filter(ethnicity == "white")
View(onlywhites)
includingwhite <-profiles %>% filter(grepl("white", ethnicity))
View(includingwhite)
vegan <- profiles %>%
filter(grepl("strictly vegan", diet))
View(vegan)
profiles %>%
ggplot() + geom_bar(mapping = aes(x=body_type))
adventurous <-
profiles %>%
filter(grepl("adventurous", essay0))
library(tidyverse)
adventurous <-
profiles %>%
filter(grepl("adventurous", essay0))
adventurous
View(adventurous)
library("png")
filepath = "~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/"
filenames = list.files(filepath, pattern = "*.png")
fullpathnames = paste(filepath, filenames, sep="")
images <- c()
for(i in 1:length(fullpathnames)) {
images <- cbind(images, as.vector(readPNG(i)))
}
filepath = "~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/"
filenames = list.files(filepath, pattern = "*.png")
fullpathnames = paste(filepath, filenames, sep="")
images <- c()
for(i in 1:length(fullpathnames)) {
images <- cbind(images, as.vector(readPNG(i)))
}
filepath = "~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/"
images <- cbind(images, as.vector(readPNG(filespath[i])))
images <- c()
for(i in 1:length(fullpathnames)) {
images <- cbind(images, as.vector(readPNG(filespath[i])))
}
images <- cbind(images, as.vector(readPNG(fullpathnames[i])))
filepath = "~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/"
filenames = list.files(filepath, pattern = "*.png")
fullpathnames = paste(filepath, filenames, sep="")
images <- c()
for(i in 1:length(fullpathnames)) {
images <- cbind(images, as.vector(readPNG(fullpathnames[i])))
}
View(adventurous)
View(adventurous)
View(images)
View(images)
?sweep
the.mean <- sweep(images, 1, mean)
the.mean <- sweep(images, 1, rowMean(the.mean))
the.mean <- sweep(images, 1, rowMean(images
?t
?t
x.matrix <- t(the.mean)
?t
x.matrix <- t(the.mean)
the.mean <- sweep(images, 1, rowMean(images))
the.mean <- sweep(images, 1, rowMeans(images))
x.matrix <- t(the.mean)
View(x.matrix)
View(x.matrix)
the.mean <- abs(sweep(images, 1, rowMeans(images)))
the.mean <- sweep(images, 1, rowMeans(images))
the.mean <- sweep(images, 1, rowMeans(images))
x.matrix <- t(the.mean)
x.matrix <- t(the.mean)
covariance <- the.mean * x.matrix
x.matrix <- t(the.mean)
xt <- t(x.matrix)
covariance <- x.matrix * x
x.matrix <- t(the.mean)
xt <- t(x.matrix)
covariance <- x.matrix * xt
x.matrix <- t(the.mean)
xt <- t(x.matrix)
covariance <- %x.matrix * xt%;
x.matrix <- t(the.mean)
xt <- t(x.matrix)
covariance <- x.matrix %*% xt;
library("png")
filepath = "~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/"
filenames = list.files(filepath, pattern = "*.png")
fullpathnames = paste(filepath, filenames, sep="")
images <- c()
for(i in 1:length(fullpathnames)) {
images <- cbind(images, as.vector(readPNG(fullpathnames[i])))
}
the.mean <- sweep(images, 1, rowMeans(images))
x.matrix <- t(the.mean)
xt <- t(x.matrix)
covariance <- x.matrix %*% xt;
covariance.matrix <- x.matrix %*% xt;
View(covariance)
covariance <- x.matrix %*% xt;
covariance.matrix <- t(covarience)
covariance <- x.matrix %*% xt;
ev = eigen(covariance)
covariance <- x.matrix %*% xt;
ev = eigen(covariance)
ev = eigen(covariance)
ten.eigen.vectors <- ev$vectors[,10]
eigen.transpose <- t(ten.eigen.vectors)
eigen.transpose <- t(ten.eigen.vectors)
ten.eigen.vectors <- ev$vectors[,10]
eigentranspose <- t(ten.eigen.vectors)
et <- t(ten.eigen.vectors)
weights <- et %*% x
weights <- et %*% x.matrix
filepath.test = "~/Developments/csci454-biometrics/hw/hw02/testingfaces2/"
filenames.test = list.files(filepath.test, pattern = "*.png")
fullpathnames.test = paste(filepath.test, filenames,test, sep="")
filepath.test = "~/Developments/csci454-biometrics/hw/hw02/testingfaces2/"
filenames.test = list.files(filepath.test, pattern = "*.png")
fullpathnames.test = paste(filepath.test, filenames.test, sep="")
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
images.test <- cbind(images.test, as.vector(readPNG(fullpathnames.test[i])))
}
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- as.vector(readPNG(fullpathnames.test[i]))
images.test <- cbind(images.test, et %*% d)
}
d <- c(as.vector(readPNG(fullpathnames.test[i])))
images.test <- cbind(images.test, et %*% d)
filepath.test = "~/Developments/csci454-biometrics/hw/hw02/testingfaces2/"
filenames.test = list.files(filepath.test, pattern = "*.png")
fullpathnames.test = paste(filepath.test, filenames.test, sep="")
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- c(as.vector(readPNG(fullpathnames.test[i])))
images.test <- cbind(images.test, et %*% d)
}
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- c(as.vector(readPNG(fullpathnames.test[i])))
y <- et %*% d
images.test <- cbind(images.test, y)
}
View(et)
View(et)
ten.eigen.vectors <- ev$vectors[,10]
et <- t(ten.eigen.vectors)
View(et)
View(et)
ten.eigen.vectors <- ev$vectors[,10]
view(ten.eigen.vectors)
View(ten.eigen.vectors)
ten.eigen.vectors <- ev$vector[,10]
View(ten.eigen.vectors)
ten.eigen.vectors <- ev$vectors[,1:10]
et <- t(ten.eigen.vectors)
View(ten.eigen.vectors)
filepath.test = "~/Developments/csci454-biometrics/hw/hw02/testingfaces2/"
filenames.test = list.files(filepath.test, pattern = "*.png")
fullpathnames.test = paste(filepath.test, filenames.test, sep="")
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- c(as.vector(readPNG(fullpathnames.test[i])))
y <- et %*% d
images.test <- cbind(images.test, y)
}
images.test <- cbind(images.test, y)
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- c(as.vector(readPNG(fullpathnames.test[i])))
y <- et %*% d
images.test <- cbind(images.test, y)
}
y <- (et %*% d)
y <- (et %*% d)
d <- c(as.vector(readPNG(fullpathnames.test[i])))
y <- (et %*% d)
View(d)
View(d)
View(d)
View(d)
d <- cbind(as.vector(readPNG(fullpathnames.test[i])))
d <- cbind(as.vector(readPNG(fullpathnames.test[i])))
library("png")
d <- cbind(as.vector(readPNG(fullpathnames.test[i])))
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- cbind(as.vector(readPNG(fullpathnames.test[i])))
y <- (et %*% d)
images.test <- cbind(images.test, y)
}
images.test <- cbind(images.test, et %*% d)
images.test <- c(images.test, et %*% d)
View(et)
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- cbind(as.vector(readPNG(fullpathnames.test[i])))
images.test <- cbind(images.test, et %*% d)
}
View(et)
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- cbind(as.vector(readPNG(fullpathnames.test[i])))
images.test <- cbind(images.test, et %*% d)
}
dim(d)
dim(et)
View(et)
dim(x.matrix)
View(x.matrix)
dim(covariance)
dim(images)
dim(the.mean)
dim(xt)
dim(x.matrix)
the.mean <- sweep(images, 2, rowMeans(images))
rowMeans(images)
dim(rowMeans(images))
xmean <- apply(x.matrix, 2, rowMeans(x.matrix))
xmean <- apply(x.matrix, 2, x-rowMeans(x.matrix))
xmean <- apply(x.matrix, 2, x.matrix-rowMeans(x.matrix))
xmean <- apply(x.matrix, 2, x.matrix - xmean)
the.mean <- rowMeans(images)
dim(the.mean)
View(the.mean)
?apply
xmean <- apply(x.matrix, 2, x.matrix - xmean)
xmean <- apply(x.matrix, 2, x.matrix - the.mean)
xmean <- apply(x.matrix, 2, function(x) x-the.mean)
xmean
View(xmean)
dim(xmean)
xmean <- apply(x.matrix, 1, function(x) x-the.mean)
View(xmean)
dim(xmean)
images.test <- c()
for(i in 1:length(fullpathnames.test)) {
d <- cbind(as.vector(readPNG(fullpathnames.test[i])))
images.test <- cbind(images.test, et %*% d)
}
x.matrix <- t(xmean)
xt <- t(x.matrix)
dim(x.matrix)
xt.matrix <- t(xmean)
covariance <- x.matrix %*% xt.matrix;
View(x.matrix)
View(x.matrix)
xmean <- apply(x.matrix, 1, function(x) x-the.mean)
View(x.matrix)
View(x.matrix)
View(images)
View(images)
xmean <- apply(images, 1, function(x) x-the.mean)
View(xmena)
View(xmeab)
View(xmean)
library(shiny)
library(tidyverse)
lifespan1 <- read.csv("lifeexpectancy.csv",check.names=F)
income1 <- read.csv("incomepp.csv", check.names=F)
population1 <- read.csv("population.csv", check.names=F)
lifespan <- gather(lifespan1, year, lifespan, -"Life expectancy")
income <- gather(income1, year, income, -"GDP per capita")
population <- gather(population1, year, population, -"Total population")
setwd("~/Developments/math216-datascience/hw/hw3/lifeexpectancy")
?join
lifespan1 <- read.csv("lifeexpectancy.csv",check.names=F)
income1 <- read.csv("incomepp.csv", check.names=F)
population1 <- read.csv("population.csv", check.names=F)
lifespan <- gather(lifespan1, year, lifespan, -"Life expectancy")
income <- gather(income1, year, income, -"GDP per capita")
population <- gather(population1, year, population, -"Total population")
View(lifespan)
View(lifespan)
View(income)
almost <- join(lifespan, income)
almost <- inner_join(lifespan, income)
View(almost)
View(almost)
lifespan <- gather(lifespan1, year, lifespan, -"Life expectancy")
colnames(lifespan1)[1] <- "country"
income <- gather(income1, year, income, -"GDP per capita")
colnames(income1)[1] <- "country"
population <- gather(population1, year, population, -"Total population")
colnames(population1)[1] <- "country"
lifespan1 <- read.csv("lifeexpectancy.csv",check.names=F)
colnames(lifespan1)[1] <- "country"
