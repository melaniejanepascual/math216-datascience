library(ggplot2)
# Read in plants.csv file
plants <- read.csv(file = "Plants.csv")
# Question 1: Compare fertilizer A and fertilizer B
fert.a <- plants$Fert = a
fert.b <- plants$Fert = b
table(fert.a, fert.b)
library(ggplot2)
# Read in plants.csv file
plants <- read.csv(file = "Plants.csv")
# Question 1: Compare fertilizer A and fertilizer B
fert.a <- plants$Fert = 'A'
fert.b <- plants$Fert = 'B'
table(fert.a, fert.b)
ggplot(data = plants, mapping = aes(x = species, y = biomasst2)) +
geom_boxplot()
?mean
biomass1 <- plants$BiomassT2 = '1'
biomass2 <- plants$BiomassT2 = '2'
biomass3 <- plants$BiomassT2 = '3'
mean(biomass1)
mean(biomass2)
mean(biomass3)
knitr::opts_chunk$set(echo = TRUE)
genuine.sd <- sd(genuine.scores$score)
## Set up objects
scores <- read.csv("hw1_list.csv")
scores$Match <- ifelse(substr(scores$sequence1,1,6) == substr(scores$sequence2,1,6),"Genuine", "Imposter")
genuine.scores <- subset(scores, Match == "Genuine")
imposter.scores <- subset(scores, Match == "Imposter")
hist(genuine.scores$score, col = rgb(1,0,0,0.5), main = "Genuine and Imposter Distribution", xlab = "Distance Scores", ylab = "Frequency", freq = FALSE)
hist(imposter.scores$score, col = rgb(0,0,1,0.5), add = T, freq = FALSE)
legend("top", c("Genuine", "Imposter"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)))
genuine.sd <- sd(genuine.scores$score)
imposter.sd <- sd(imposter.scores$score)
genuine.mean <- mean(genuine.scores$score)
imposter.mean <- mean(imposter.scores$score)
dprime <- (sqrt(2) * abs((genuine.mean)-(imposter.mean)))/sqrt((genuine.sd^2)+(imposter.sd^2))
FARvsFRR <- data.frame(FRR, FAR)
FARvsFRR <- data.frame(FRR, FAR)
FARvsFRR <- data.frame(FRR, FAR)
FAR <- c(FRR, nrow(subset(genuine.scores, score > d))/nrow(genuine.scores))
subset(genuine.scores, score > d)
FARvsFRR <- data.frame(FRR, FAR)
FARvsFRR -> data.frame(FRR, FAR)
for(d in seq(0.1, 0.9, 0.05)) {
FAR <- nrow(subset(genuine.scores, score > d))/nrow(genuine.scores)
FAR <- nrow(subset(imposter.scores, score < d))/nrow(imposter.scores)
}
View(genuine.scores)
FARvsFRR -> data.frame(FRR, FAR)
?seq
View(imposter.scores)
View(scores)
>hist
?hist
knitr::opts_chunk$set(echo = TRUE)
?data.frame
for(threshold in seq(0.0, 0.99, 0.10)) {
FAR <- c(FRR, nrow(subset(genuine.scores, score > threshold))/nrow(genuine.scores))
FAR <- c(FRR, nrow(subset(imposter.scores, score < threshold))/nrow(imposter.scores))
DETcurve -> data.frame(FRR, FAR)
}
?nrow
nrow(subset(genuine.scores, score > threshold))
for(threshold in seq(0.0, 0.99, 0.05)) {
FAR <- nrow(subset(genuine.scores, score >= threshold))/nrow(genuine.scores))
?subset
nrow(subset(genuine.scores, score >= threshold))
nrow(genuine.scores)
?nrow
nrow(subset(genuine.scores, genuine.scores$score >= threshold))
threshold <- .50
nrow(subset(genuine.scores, genuine.scores$score >= threshold))
nrow(genuine.scores)
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <-nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DETcurve -> data.frame(FRR, FAR)
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <-nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
}
DETcurve -> data.frame(FRR, FAR)
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <-nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DETcurve -> data.frame(FRR, FAR)
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
}
DETcurve <- data.frame(FRR, FAR)
plot(DETcurve)
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
}
DETcurve <- data.frame(FAR, FRR)
plot(DETcurve)
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
plot(DETcurve)
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
plot(DETcurve, type = "l", lty = "1")
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
}
plot(DETcurve, type = "l", col = "blue")
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
plot(DETcurve, type = "l", col = "blue")
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
plot(DETcurve, type = "o", col = "blue")
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
plot(DETcurve, type = "l", col = "blue")
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
plot(DETcurve, type = "l", col = "blue")
}
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
DETcurve <- data.frame(FAR, FRR)
}
plot(DETcurve, type = "l", col = "blue")
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
}
plot(DETcurve, type = "l", col = "blue")
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- data.frame(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-data.frame(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
}
plot(DETcurve, type = "l", col = "blue")
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- data.frame(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-data.frame(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
plot(DETcurve, type = "l", col = "blue")
}
plot(DETcurve, type = "l", col = "blue")
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- c(nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores))
FRR <-c(nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores))
plot((FAR, FRR), type = "l", col = "blue")
threshold
threshold = 0.05
threshold
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
for(threshold in seq(0.05, 0.99, 0.05)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
plot(DET, type = "l", col = "blue")
}
?xlim
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
plot(DET, xlim = max(FAR), main = "Detection Error Tradeoff" )
}
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
plot(DET, xlim(max(FAR)), main = "Detection Error Tradeoff" )
}
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
plot(DET, xlim = range(max(FAR)), main = "Detection Error Tradeoff" )
}
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
}
plot(DET, xlim = range(max(FAR)), main = "Detection Error Tradeoff" )
View(DET)
View(DETcurve)
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
}
DET <- data.frame(FAR, FRR)
plot(DET, xlim = range(max(FAR)), main = "Detection Error Tradeoff" )
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
plot(DET, xlim = range(max(FAR)), main = "Detection Error Tradeoff" )
}
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
plot(DET, xlim = range(0, max(FAR)), main = "Detection Error Tradeoff" )
}
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
}
plot(DET, xlim = range(0, max(FAR)), ylim = range(0, max(FRR)), main = "Detection Error Tradeoff" )
for(threshold in seq(0.05, 0.99, 0.02)) {
FAR <- nrow(subset(imposter.scores, imposter.scores$score >= threshold))/nrow(imposter.scores)
FRR <- nrow(subset(genuine.scores, genuine.scores$score < threshold))/nrow(genuine.scores)
DET <- data.frame(FAR, FRR)
plot(DET, xlim = range(0, max(FAR)), ylim = range(0, max(FRR)), main = "Detection Error Tradeoff" )
}
View(DET)
View(DET)
View(DET)
## Practice
library(tidyverse)
house <- read.table("House.txt", header = TRUE)
## Construct a data set with beds/baths/price and only cheap houses (<$100,000)
house %>%
select(Beds, Baths, Price) %>%
filter(Price < 100000)
## Construct data set only with columns starting with "B" and whose values for all cells are >= 2 and <= 4
house %>%
select(starts_with("B")) %>%
filter(between(house, 2, 4))
## Find the most expensive house with either 2 or 3 beds, then make a scatterplot of all houses vs. taxes with 2 or 3 beds
## and highlight this point (The most expensive house)
setwd("~/Developments/math216-datascience/lectures")
source('~/Developments/math216-datascience/lectures/house.R')
View(house)
View(house)
house %>%
select(Beds, Baths, Price) %>%
filter(Price < 100000)
## Construct data set only with columns starting with "B" and whose values for all cells are >= 2 and <= 4
house %>%
select(starts_with("B")) %>%
filter(between(house, 2, 4), between(Baths,2,4))
library(tidyverse)
## Construct data set only with columns starting with "B" and whose values for all cells are >= 2 and <= 4
house %>%
select(starts_with("B")) %>%
filter(between(house, 2, 4), between(Baths,2,4))
## Construct data set only with columns starting with "B" and whose values for all cells are >= 2 and <= 4
house %>%
select(starts_with("b")) %>%
filter(between(Beds, 2, 4), between(Baths,2,4))
house %>%
filter(between(Beds, 2, 3)) %>%  ## houses with 2/3 beds
arrange(Price)
expensive.house <- filter(house, case == 6)
expensive.house
install.packages("ggplot2")
library(ggplot2)
house %>%
filter(between(Beds, 2, 3)) %>%  ## houses with 2/3 beds
arrange(Price) %>% ## organized by price, house 6 is the most expensive
ggplot(mapping = aes(Taxes, Price)) + geom_point() + geom_point(data = expensive.house, color = "red", size = 5)
expensive.house <- filter(house, case == 6)
house <- read.table("House.txt", header = TRUE)
house %>%
filter(between(Beds, 2, 3)) %>%  ## houses with 2/3 beds
arrange(Price) %>% ## organized by price, house 6 is the most expensive
ggplot(mapping = aes(Taxes, Price)) + geom_point() + geom_point(data = expensive.house, color = "red", size = 5)
expensive.house <- filter(house, case == 6)
library(tidyverse)
house %>%
filter(between(Beds, 2, 3)) %>%  ## houses with 2/3 beds
arrange(Price) %>% ## organized by price, house 6 is the most expensive
ggplot(mapping = aes(Taxes, Price)) + geom_point() + geom_point(data = expensive.house, color = "red", size = 5)
expensive.house <- filter(house, case == 6)
setwd("~/Developments/math216-datascience/lectures")
house <- read.table("House.txt", header = TRUE)
## mutate() group_by() summarize()
house <- read.table("House.txt", header = TRUE)
## mutate
house %>%
mutate(BedBathBeyond = Beds + Baths) ##creates new variable that adds both
house %>%
transmute(BedBathBeyond = Beds + Baths)
## group_by() and summarize()
library(ggplot2)
diamonds %>%
group_by(color) %>%
summarize(mean.price = mean(price))
diamonds %>%
group_by(color) %>%
summarize(prop.expensive = mean(price > 10000))
install.packages('nycflights13')
flights
flights
install.packages('nycflights13')
flights
setwd("~/Developments/math216-datascience/lectures")
flights
library(nycflights13)
flights
view(flights)
flights
flights$arr_delay
flights$dest
flights$dest == 'BTV'
flights %>%
group_by(dest == 'BTV') %>%
summarize(delay = mean(arr_delay))
flights %>%
group_by(dest == 'BOS') %>%
summarize(delay.avg = mean(arr_delay))
flights %>%
group_by(dest) %>%
summarize(delay.avg = mean(arr_delay))
flights %>%
group_by(dest == 'BOS') %>%
summarize(delay.avg = mean(arr_delay))
diamonds %>%
group_by(color) %>%
summarize(mean.price = mean(price))
flights %>%
group_by(dest) %>%
summarize(mean.delay = mean(arr_delay))
knitr::opts_chunk$set(echo = TRUE)
## Set up environment
taboo <- read.csv("Taboo.csv")
setwd("~/Developments/math216-datascience/hw/hw2")
## Set up environment
taboo <- read.csv("Taboo.csv")
flights %>%
filter(dest == "BOS" | dest == "BTV") %>%
group_by(dest) %>%
summarize(delay.avg = mean(dep_delay))
flights %>%
filter(dest == "BOS" | dest == "BTV") %>%
group_by(dest) %>%
summarize(delay.avg = mean(dep_delay, na.rm = TRUE))
